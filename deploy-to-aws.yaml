name: CI/CD - Deploy Cooperativa.API to AWS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build, Push Docker image and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout código fonte
      uses: actions/checkout@v4

    - name: Configurar o .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Build da aplicação
      run: |
        dotnet restore src/Cooperativa.API/Cooperativa.API.csproj
        dotnet build src/Cooperativa.API/Cooperativa.API.csproj --configuration Release

    - name: Login no Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        region: ${{ secrets.AWS_REGION }}

    - name: Construir a imagem Docker
      run: |
        docker build -t ${{ secrets.ECR_REPOSITORY }}:latest ./src/Cooperativa.API

    - name: Tag da imagem Docker
      run: |
        docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

    - name: Push da imagem para o ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

    - name: Deploy no ECS (atualizar serviço)
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: .aws/ecs-task-definition.json
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true
        region: ${{ secrets.AWS_REGION }}
